#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

from sympy import (
    Point2D,
    Rational,
    expand,
    simplify,
    solve,
    sqrt,
    var,
)

X = 1
Y = sqrt(2)

def main():
    X = 1
    Y = sqrt(2)
    p = var('p', positive=True)
    q = sqrt(Y ** 2 - p ** 2)
    A = Point2D(p, 0)
    B = Point2D(0, q)
    C = Point2D((Y - q) * (q / p), Y)
    D = Point2D(X, (X - p) * (p / q))
    Cp = D.translate(-p, q)
    Dp = C.translate(p, -q)
    del A, Dp  # not used for this calculation
    S = B.distance(C) - B.distance(Cp)
    [p_max] = (p for p in solve(S) if p != Rational(4, 3))
    print('pₘₐₓ =', p_max)
    p_max = expand(p_max, complex=True)
    w_max = B.distance(C).subs(p, p_max)
    w_max = simplify(w_max)
    print('wₘₐₓ =', w_max)
    w_max_fl = float(w_max)
    assert 0.36 < w_max_fl < 0.37
    print('     ≈', w_max_fl)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
